using System;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace MergeSort
{
    class Program
    {
        static void Main(string[] args)
        {
            List<int> input = new List<int>{
                6931, 6501, 5918, 2736, 8263, 9480, 101, 7419, 3102, 3077, 3906, 8827, 1073, 6228, 8551, 5146, 5530, 3021, 4707, 9936, 
                7963, 1694, 7086, 3960, 9836, 9027, 9368, 7159, 5956, 8477, 3144, 9897, 8303, 241, 8493, 7798, 5295, 3355, 8897, 3326, 
                8862, 2095, 9102, 9939, 6509, 3742, 9404, 9533, 4292, 3123, 7686, 4096, 1959, 9276, 426, 9382, 7781, 2909, 7079, 4765, 
                8698, 9445, 3838, 3504, 484, 7013, 9521, 1770, 1624, 8790, 2521, 1080, 2367, 8599, 7355, 2625, 877, 5680, 6922, 6736, 
                5979, 9790, 6380, 4489, 5354, 2787, 3149, 7711, 1913, 4219, 2780, 5969, 7566, 1048, 9851, 7814, 5329, 1465, 6373, 6187, 
                6399, 740, 9960, 2351, 6598, 912, 4999, 432, 162, 1493, 7462, 9439, 1388, 3552, 337, 3043, 2949, 8008, 1588, 3770, 2182, 
                7735, 9520, 668, 2341, 8371, 6836, 3220, 2561, 5514, 6829, 7130, 8132, 919, 7267, 7563, 6038, 7257, 9974, 3602, 3030, 1611, 
                4474, 7720, 2331, 9464, 4860, 3683, 9884, 7382, 8838, 5266, 2208, 6069, 1957, 5766, 9815, 7900, 8586, 9116, 7910, 4416,
                6831, 4693, 2723, 9586, 3547, 1625, 4428, 2805, 7750, 2505, 2446, 3659, 6205, 4934, 648, 9492, 801, 478, 6177, 3780, 3967, 991, 3096,
                3595, 6175, 3732, 148, 2556, 3761, 7508, 6522, 2471, 6737, 2358, 5260, 7023, 4834, 6319, 8771, 8176, 7891, 1137, 1, 8728, 1471, 1339,
                3341, 9876, 7679, 2534, 6279, 1718, 1181, 7836, 1230, 5183, 2035, 332, 5769, 1261, 3515, 6127, 9659, 3947, 9462, 3092, 6705, 8288,
                2224, 3215, 839, 4862, 1606, 7684, 5093, 6588, 1136, 6774, 6159, 5726, 2360, 3211, 5975, 3745, 496, 3830, 4954, 3055, 1441, 5131,
                294, 5967, 1269, 2154, 5767, 3480, 182, 6745, 6257, 8568, 896, 7104, 7128, 9739, 4732, 8842, 3033, 7460, 2918, 9554, 6766, 9150,
                7850, 6750, 2413, 2030, 7103, 2211, 3744, 5488, 9168, 529, 2060, 4131, 2887, 1975, 5205, 2143, 7768, 8737, 6565, 4330, 7863, 2451,
                7607, 9651, 9193, 9332, 8081, 5759, 1056, 6752, 3136, 8834, 5731, 1149, 377, 3392, 5064, 2492, 8289, 1370, 1005, 7390, 1943, 3632,
                4568, 5007, 6649, 4249, 7055, 416, 7531, 1393, 5206, 8924, 7485, 8764, 1192, 1302, 7240, 6368, 2932, 2455, 4757, 2474, 7219, 3885,
                8028, 651, 823, 5162, 5790, 3037, 5660, 3441, 2731, 7092, 7704, 3953, 3313, 2251, 6378, 2778, 576, 619, 2951, 4970, 3292, 6940, 2959,
                8839, 628, 1343, 1029, 6273, 4574, 8806, 7498, 379, 5191, 5383, 2368, 1953, 3613, 5735, 9329, 208, 4280, 6862, 2924, 2898, 2125, 3994,
                2276, 9644, 9648, 8875, 705, 5501, 1893, 4468, 6610, 1602, 3718, 8541, 1834, 5425, 7662, 8312, 2725, 3820, 1850, 4808, 3792, 2544, 8495,
                8203, 5317, 9117, 4987, 6249, 7503, 8759, 660, 2478, 8281, 7441, 3833, 2768, 6839, 6468, 3687, 5540, 2740, 4082, 8232, 2157, 2115, 2085,
                2055, 917, 3952, 5243, 2973, 4186, 1371, 3903, 5900, 7601, 6989, 5685, 3383, 4104, 8948, 9526, 9870, 102, 9088, 9086, 8772, 4702, 9549,
                5487, 5156, 1397, 4360, 4119, 6518, 921, 8123, 3158, 3519, 3587, 7254, 9234, 1904, 5282, 9030, 8098, 8311, 8090, 6208, 4894, 5765, 5813,
                9715, 135, 7933, 7110, 453, 2113, 1040, 129, 6865, 5300, 5855, 5679, 6726, 5812, 6759, 7594, 1224, 5059, 3975, 8406, 1406, 5772, 7057, 6457,
                1264, 8563, 8413, 8972, 7626, 6060, 6584, 600, 5299, 4056, 4179, 2546, 8942, 1927, 7548, 3963, 5537, 6416, 7156, 8925, 9605, 7646, 457, 7978,
                3045, 4673, 4616, 4776, 5016, 92, 8752, 1487, 832, 4880, 234, 3979, 6287, 5218, 1950, 7146, 9343, 6021, 9929, 2199, 412, 5226, 649, 6059, 3951,
                1173, 996, 4691, 6651, 519, 4627, 7414, 5, 6262, 4973, 7423, 5802, 6508, 5654, 5624, 4220, 6795, 7973, 293, 9617, 3771, 7644, 9983, 6219, 3063,
                8453, 4507, 7658, 4607, 1226, 6974, 7136, 5785, 3134, 8298, 1864, 8515, 1908, 2468, 2406, 6155, 2192, 3485, 7776, 9635, 8547, 4997, 968, 5806,
                9132, 9469, 6980, 2103, 2773, 3753, 5439, 4789, 4967, 2281, 2333, 8141, 9495, 5307, 3437, 164, 6306, 1271, 3853, 6084, 585, 528, 4016, 3482, 3758,
                8895, 1938, 2676, 5961, 8640, 5752, 3596, 7816, 2198, 855, 8409, 2494, 9246, 7669, 669, 3773, 9504, 7238, 5531, 2462, 8276, 8798, 8467, 8226, 4223,
                6867, 2295, 7459, 3878, 6151, 1318, 7712, 3928, 4843, 3060, 4017, 233, 7279, 5107, 2506, 5246, 8538, 3667, 3553, 5677, 2178, 7547, 3421, 1897, 9244,
                9288, 5406, 7628, 8255, 1097, 229, 9488, 5836, 1991, 5015, 545, 1320, 5193, 4556, 1504, 8522, 6340, 3789, 6547, 7888, 3391, 9685, 7645, 3715, 2340,
                8349, 2746, 2008, 2936, 2202, 3615, 3511, 2314, 1961, 32, 3156, 2970, 1911, 5499, 3452, 3551, 4697, 7839, 4553, 7465, 2583, 6192, 6847, 9754, 6004,
                3543, 7614, 9222, 2758, 9692, 7405, 3575, 1131, 1352, 8618, 2136, 8020, 9192, 2148, 7430, 3050, 5298, 7123, 6366, 3741, 9025, 4185, 1896, 3275, 557,
                4603, 9221, 1061, 5846, 6808, 3476, 5697, 5375, 3996, 7131, 223, 2405, 1696, 758, 5714, 3582, 5153, 8709, 1219, 934, 7002, 1064, 5441, 2259, 6725,
                6099, 4900, 3958, 2017, 7846, 2063, 4836, 5997, 6643, 2721, 6307, 2776, 7401, 1457, 3638, 9832, 4687, 6959, 9831, 9039, 8602, 2940, 8628, 1374,
                7477, 4679, 9303, 3637, 258, 2037, 1818, 5503, 4151, 94, 8206, 4921, 3717, 6924, 7582, 6214, 8882, 1922, 6514, 77, 3345, 4307, 1387, 409, 7199,
                1400, 3524, 9454, 3862, 3315, 6886, 2508, 4803, 9572, 5094, 5565, 3962, 2677, 3999, 6738, 8550, 1699, 4766, 9339, 2717, 5462, 8051, 5539, 4321,
                298, 6036, 1443, 7734, 7769, 6079, 3724, 5358, 3774, 8445, 6141, 5211, 7398, 166, 2045, 3856, 9706, 6834, 265, 7037, 8674, 1260, 9717, 7620, 8968,
                7517, 4347, 6042, 5701, 5665, 5510, 4570, 9591, 7980, 4241, 2119, 8785, 3502, 9930, 3513, 8159, 4529, 2651, 9038, 209, 5418, 384, 3786, 3872, 515,
                7924, 6268, 6868, 4982, 190, 4950, 1587, 7078, 2763, 8126, 3764, 9563, 1517, 252, 3265, 8905, 7687, 3356, 3586, 7803, 9680, 342, 9734, 7817, 4948,
                5648, 7028, 1977, 7809, 6386, 452, 2655, 4037, 1258, 4429, 6275, 8394, 3432, 6072, 4858, 8265, 1408, 320, 900, 6475, 6832, 9064, 9165, 1151, 8624,
                4115, 7875, 1024, 5940, 5977, 5385, 9835, 5842, 1171, 123, 5445, 3020, 6298, 5050, 4301, 979, 7962, 7402, 8666, 722, 5409, 6809, 7140, 6635, 9761,
                6972, 279, 8503, 7859, 499, 2100, 300, 4135, 5657, 933, 2922, 8044, 4930, 6126, 4594, 273, 3614, 9990, 9478, 1196, 5148, 4099, 8447, 5096, 5150, 5632, 3013
            };

            foreach (var item in split(input))
            {
                Console.Write($"{item},");
            }
        }

        /// <summary>
        /// Recursively split the array into two arrays until all array contains only 1 or 0 element.
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        static List<int> split(List<int> input)
        {
            if (input.Count < 2)
            {
                return input;
            }
            int mid = input.Count / 2;

            List<int> left = input.GetRange(0,mid);
            List<int> right = input.GetRange(mid,input.Count - mid);

            var lt = Task.Run<List<int>>(() => split(left));
            var rt = Task.Run<List<int>>(() => split(right));
            Task.WaitAll(lt, rt);
            return merge(lt.Result, rt.Result);
        }

        /// <summary>
        /// Merge two arrays back and sort element while merging.
        /// </summary>
        /// <param name="left"></param>
        /// <param name="right"></param>
        /// <returns></returns>
        static List<int> merge(List<int> left, List<int> right)
        {
            List<int> output = new List<int>();
            while (left.Count > 0 && right.Count > 0)
            {
                if (left[0] >= right[0])
                {
                    output.Add(right[0]);
                    right.RemoveAt(0);
                }
                else
                {
                    output.Add(left[0]);
                    left.RemoveAt(0);
                }
            }

            //if any side is empty.
            if (right.Count > 0)
            {
                output.AddRange(right);
            }
            if (left.Count > 0)
            {
                output.AddRange(left);
            }
            return output;
        }
    }
}
